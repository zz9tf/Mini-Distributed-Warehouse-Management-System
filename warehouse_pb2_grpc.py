# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import warehouse_pb2 as warehouse__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in warehouse_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OrderServiceStub(object):
    """==================== 服务定义 ====================

    仓库服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PlaceOrder = channel.unary_unary(
                '/warehouse.OrderService/PlaceOrder',
                request_serializer=warehouse__pb2.OrderRequest.SerializeToString,
                response_deserializer=warehouse__pb2.OrderResponse.FromString,
                _registered_method=True)
        self.PutItem = channel.unary_unary(
                '/warehouse.OrderService/PutItem',
                request_serializer=warehouse__pb2.PutItemRequest.SerializeToString,
                response_deserializer=warehouse__pb2.PutItemResponse.FromString,
                _registered_method=True)
        self.UpdateItem = channel.unary_unary(
                '/warehouse.OrderService/UpdateItem',
                request_serializer=warehouse__pb2.UpdateItemRequest.SerializeToString,
                response_deserializer=warehouse__pb2.UpdateItemResponse.FromString,
                _registered_method=True)
        self.ListItems = channel.unary_unary(
                '/warehouse.OrderService/ListItems',
                request_serializer=warehouse__pb2.ListItemsRequest.SerializeToString,
                response_deserializer=warehouse__pb2.ListItemsResponse.FromString,
                _registered_method=True)


class OrderServiceServicer(object):
    """==================== 服务定义 ====================

    仓库服务
    """

    def PlaceOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListItems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PlaceOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.PlaceOrder,
                    request_deserializer=warehouse__pb2.OrderRequest.FromString,
                    response_serializer=warehouse__pb2.OrderResponse.SerializeToString,
            ),
            'PutItem': grpc.unary_unary_rpc_method_handler(
                    servicer.PutItem,
                    request_deserializer=warehouse__pb2.PutItemRequest.FromString,
                    response_serializer=warehouse__pb2.PutItemResponse.SerializeToString,
            ),
            'UpdateItem': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateItem,
                    request_deserializer=warehouse__pb2.UpdateItemRequest.FromString,
                    response_serializer=warehouse__pb2.UpdateItemResponse.SerializeToString,
            ),
            'ListItems': grpc.unary_unary_rpc_method_handler(
                    servicer.ListItems,
                    request_deserializer=warehouse__pb2.ListItemsRequest.FromString,
                    response_serializer=warehouse__pb2.ListItemsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'warehouse.OrderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('warehouse.OrderService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrderService(object):
    """==================== 服务定义 ====================

    仓库服务
    """

    @staticmethod
    def PlaceOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/warehouse.OrderService/PlaceOrder',
            warehouse__pb2.OrderRequest.SerializeToString,
            warehouse__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PutItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/warehouse.OrderService/PutItem',
            warehouse__pb2.PutItemRequest.SerializeToString,
            warehouse__pb2.PutItemResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/warehouse.OrderService/UpdateItem',
            warehouse__pb2.UpdateItemRequest.SerializeToString,
            warehouse__pb2.UpdateItemResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/warehouse.OrderService/ListItems',
            warehouse__pb2.ListItemsRequest.SerializeToString,
            warehouse__pb2.ListItemsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class LoggerServiceStub(object):
    """日志服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LogOperation = channel.unary_unary(
                '/warehouse.LoggerService/LogOperation',
                request_serializer=warehouse__pb2.LogRequest.SerializeToString,
                response_deserializer=warehouse__pb2.LogResponse.FromString,
                _registered_method=True)
        self.QueryLogs = channel.unary_unary(
                '/warehouse.LoggerService/QueryLogs',
                request_serializer=warehouse__pb2.QueryLogsRequest.SerializeToString,
                response_deserializer=warehouse__pb2.QueryLogsResponse.FromString,
                _registered_method=True)
        self.GetStats = channel.unary_unary(
                '/warehouse.LoggerService/GetStats',
                request_serializer=warehouse__pb2.StatsRequest.SerializeToString,
                response_deserializer=warehouse__pb2.StatsResponse.FromString,
                _registered_method=True)


class LoggerServiceServicer(object):
    """日志服务
    """

    def LogOperation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoggerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LogOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.LogOperation,
                    request_deserializer=warehouse__pb2.LogRequest.FromString,
                    response_serializer=warehouse__pb2.LogResponse.SerializeToString,
            ),
            'QueryLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryLogs,
                    request_deserializer=warehouse__pb2.QueryLogsRequest.FromString,
                    response_serializer=warehouse__pb2.QueryLogsResponse.SerializeToString,
            ),
            'GetStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStats,
                    request_deserializer=warehouse__pb2.StatsRequest.FromString,
                    response_serializer=warehouse__pb2.StatsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'warehouse.LoggerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('warehouse.LoggerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LoggerService(object):
    """日志服务
    """

    @staticmethod
    def LogOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/warehouse.LoggerService/LogOperation',
            warehouse__pb2.LogRequest.SerializeToString,
            warehouse__pb2.LogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/warehouse.LoggerService/QueryLogs',
            warehouse__pb2.QueryLogsRequest.SerializeToString,
            warehouse__pb2.QueryLogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/warehouse.LoggerService/GetStats',
            warehouse__pb2.StatsRequest.SerializeToString,
            warehouse__pb2.StatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
